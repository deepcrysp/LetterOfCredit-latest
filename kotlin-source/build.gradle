plugins {
    id "us.kirchmeier.capsule" version "1.0.2"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    flatDir {
        dirs '../lib'
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    test {
        resources {
            srcDir "../config/test"
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda integration dependencies
    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-finance:$corda_release_version"
    cordaCompile "net.corda:corda-jackson:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaCompile "net.corda:corda-webserver-impl:$corda_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"
    cordaRuntime "net.corda:corda-webserver:$corda_release_version"

    testCompile "net.corda:corda-node-driver:$corda_release_version"
    testCompile name: 'wildfire'

    // CorDapp dependencies
    // Specify your cordapp's dependencies below, including dependent CorDapps
    cordapp "net.corda:corda-finance:$corda_release_version"
    cordapp name: 'wildfire'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary Pool,L=Sao Paolo,C=BR"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        webPort 10004
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                jvmArgs : [ "-Xmx1g"]
        ]
    }
    node {
        name "O=First Bank of London,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        webPort 10007
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                jvmArgs : [ "-Xmx1g"]
        ]
    }
    node {
        name "O=Shenzhen State Bank,L=Shenzhen,C=CN"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        webPort 10010
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                jvmArgs : [ "-Xmx1g"]
        ]
    }
    node {
        name "O=Analog Importers,L=Liverpool,C=GB"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10112")
        }
        webPort 10013
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                jvmArgs : [ "-Xmx1g"]
        ]
    }
    node {
        name "O=Lok Ma Exporters,L=Shenzhen,C=CN"
        p2pPort 10014
        rpcSettings {
            address("localhost:10015")
            adminAddress("localhost:10115")
        }
        webPort 10016
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                jvmArgs : [ "-Xmx1g"]
        ]
    }
    node {
        name "O=Central Bank,L=New York,C=US"
        p2pPort 10017
        rpcSettings {
            address("localhost:10018")
            adminAddress("localhost:10118")
        }
        cordapps = ["net.corda:corda-finance:$corda_release_version"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                jvmArgs : [ "-Xmx1g"]
        ]
    }
}

task runNodes(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'eloc.MainKt'
}

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

task buildExecutableJar(type: FatCapsule, dependsOn: [jar, testJar]) {
    applicationClass 'eloc.DriverKt'
    archiveName "eloc-demo.jar"
    applicationSource = files(
            configurations.runtime,
            configurations.testRuntime,
            testJar.outputs,
            jar
    )

    capsuleManifest {
        def quasarExcludeExpression = "x(antlr**;bftsmart**;ch**;co.paralleluniverse**;com.codahale**;com.esotericsoftware**;com.fasterxml**;com.google**;com.ibm**;com.intellij**;com.jcabi**;com.nhaarman**;com.opengamma**;com.typesafe**;com.zaxxer**;de.javakaffee**;groovy**;groovyjarjarantlr**;groovyjarjarasm**;io.atomix**;io.github**;io.netty**;jdk**;joptsimple**;junit**;kotlin**;net.bytebuddy**;net.i2p**;org.apache**;org.assertj**;org.bouncycastle**;org.codehaus**;org.crsh**;org.dom4j**;org.fusesource**;org.h2**;org.hamcrest**;org.hibernate**;org.jboss**;org.jcp**;org.joda**;org.junit**;org.mockito**;org.objectweb**;org.objenesis**;org.slf4j**;org.w3c**;org.xml**;org.yaml**;reflectasm**;rx**;org.jolokia**)"
        javaAgents = ["quasar-core-${quasar_version}-jdk8.jar=${quasarExcludeExpression}"]
        minJavaVersion = '1.8.0'
        jvmArgs = ['-Xmx8192m', '-XX:+UseG1GC']
    }

    // Makes the JAR executable by clicking it, but it starts in the background :(
    // reallyExecutable
}
